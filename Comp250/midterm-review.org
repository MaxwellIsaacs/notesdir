#+title: Midterm I, Review I: Easy Bullshit That Should be Even Easier
#+OPTIONS: tex:t
#+HTML_MATHJAX: t


* Review 1
** Problem 1
Grading midterms is hard and we want to automate it.
Suppose we want to ask “for what x does x2 = 12 ?” and grade your answer automatically. We provide
you with a text-box to type in your answer. We then take your answer, convert it to a double
studentAnswer, and provide it to the following function isCorrect to check if it’s correct.
There’s two big flaws with this function. What are they? Write us a better version.
#+BEGIN_SRC java
boolean isCorrect(double studentAnswer) {
        double correctAnswer = Math.sqrt(1/2);
        return studentAnswer == correctAnswer;
}
#+END_SRC

*** Answer
- The two big flaws are as follows:
  1. The function doesn't account for the student answer being negative
  2. The function tries to compare doubles directly, which won't work, especially with irrational numbers. You would need to compare the difference of the doubles to an arbitrarily small value like .001
How would I write this code?
#+BEGIN_SRC java
boolean isCorrect (double studentAnswer) {
    double correctAnswer = Math.sqrt(1/2);
    double difference = correctAnswer - Math.abs(studentAnswer);
    return Math.abs(difference) < .01;
}
#+END_SRC

** Problem 2
 Write the code that would replace ***BLANK_ONE*** and ***BLANK_TWO*** respectively to complete
the method findNextLargest(int upperBound,int[] array). The purpose of this method is to find
the position (i.e. the index) of the largest element inside array that is upper bounded by upperBound
(i.e. it is strictly lower than upperBound). You can assume that the input array contains at least one
such element. In case of ties, the method returns the largest between the indices.
#+BEGIN_SRC java
public static int findNextLargest(int upperBound, int[] array){
        int largest=0;
        for (int i=0; i<array.length;i++){
                if ( ***BLANK_ONE*** ){
                ***BLANK_TWO***
                }
        }
        return largest;
}
#+END_SRC

*** Answer
+ BLANK ONE
#+BEGIN_SRC java
array[i] > array[largest] && array[i] < upperBound
#+END_SRC
+ BLANK TWO
#+BEGIN_SRC java
largest = i;
#+END_SRC



** Problem 3
Assume inside a package called midterm there is only one file named Midterm.java and this file contains
only one Java class called Midterm.
#+BEGIN_SRC java
Galaxy andromeda = new Galaxy(“Galaxy A”);
double stars = andromeda.numOfStars;
#+END_SRC
Assuming that the statements above from the main method of the class Midterm compile and run
without any errors, write three properties you can infer to be true about the class Galaxy and its
members.

*** Answer
1. Galaxy class has a public, non static field called numOfStars
2. One of the Galaxy class's constructors takes a string as a parameter
3. numOfStars is initialized with a value in the constructor, or else it would have to be static


** Problem 4
Suppose Strings A and B have the same hashCode. What does this tell us about A and B?

*** Answer
This means that the strings could be the same value, or they could just coincedentally have the same hash code. There are infinitely many strings and a finite amount of hash codes


** Problem 5
Suppose you’re given the following two classes.
#+BEGIN_SRC java
public class Person {
        public double mass;
        public Person(double mass) {
                this.mass = mass;
        }
}
public class Planet {
        private double gravity;
        public Planet(double gravity) {
            this.gravity = gravity;
        }
}
// Returns the effective weight of Person person on this planet
public double calculateWeight(Person person) {
    return person.mass * this.gravity;
}
#+END_SRC
(a) Write a new method weightOn in the Person that enables the following code snippet to compile
and print the values 0.6 and 600 as desired.

#+BEGIN_SRC java
public static void main(String[] args) {
        Person bob = new Person(60);
        Planet pluto = new Planet(0.01);
        Planet jupiter = new Planet(10);
        System.out.println(bob.weightOn(pluto));
        System.out.println(bob.weightOn(jupiter));
}
#+END_SRC
(b) What is the type of this inside the body of calculateWeight?

*** Answer
a. Here is my implementation
   #+BEGIN_SRC java
   public double weightOn (Planet x) {
        return x.calculateWeight (this);
   }
   #+END_SRC
b. *this* is memeber of the Planet data type



** Problem 6
/Too long, see PDF for the question/

*** Answer
a. Candy would be considered an immutable data type, since it has all private fields and no setters. CandyStore follows the same structure (no setters, all private fields) so it is also immuatble
b. My implementation is below:
   #+BEGIN_SRC java
   this.candies[i].equals (c)
   #+END_SRC
c. getSourCandies is a static function associated with the Candy data type; Below is my implementation:
   #+BEGIN_SRC java
public static Candy[] getSourCandies (String OOPsux, int whyDoesEeveryFunctionNeedAnAssociatedDataType);
   #+END_SRC
d. Below is my implementation:
#+BEGIN_SRC java
candies[i].isChewier (c)
#+END_SRC


** Problem 7
/Skipped because it was UML, come back tmr/


** Problem 8
/Requires a UML diagram, see PDF/

*** Answer
return super.getPreptime() + Topping.getPrepTime;


** Problem 9
Considering what you know about the internal implementation of ArrayList in Java, how many objects
are created in the following lines of code?
#+BEGIN_SRC java
ArrayList<Wizard> slytherin = new Arraylist<Wizard>();
slytherin.add(new Wizard(18,”Draco”));
Integer age = 180;
slytherin.add(new Wizard(age, “youknowwho”));
#+END_SRC
*** Answer
Assuming everything about ArrayLists (missed this lecture), I would assume there is an object of ArrayList, a head and a tail. It also has the object within the list, so 4 in total.

** Problem 10
Using the method above, fill in the missing expressions/statements below for a method in SLinkedList
that takes no inputs, traverses the list, and swaps pairs of elements. For example, if the list had the
following elements A B C D E F G, then after the method has been executed, the list will contain the
elements in the following order B A D C F E G. The method should work no matter the size of the list.
Note that the method does not return anything, it just performs all the swaps. The time complexity
for this method should be O(n), where n is the number of elements in the list (i.e. the number of basic
steps to execute is proportional to the number of elements in the list).
#+BEGIN_SRC java
public void swapPairs(){
        SNode node = this.head;
        while ( ***BLANK1*** ) {
                ***BLANK2***
                ***BLANK3***
        }
}
#+END_SRC
*** Answer
a. BLANK1 implementation below
   #+BEGIN_SRC java
this.node.next != null
   #+END_SRC
 b. BLANK2 implementation below
   #+BEGIN_SRC java
this.swap (node, node.next);

   #+END_SRC
 c. BLANK3 implementation below
   #+BEGIN_SRC java
node = node.next.next;
   #+END_SRC

** Problem 11
/See problem on PDF, definetly took creative liberty with my answer/

1. *d.next.next.prev* is the second to last element, which is set to the current D (Diane is erased, Todd is both *D* and *d.next*)
2. *d.next* is set equal to *d.next.next*, which is the final element. This is essentially cutting the list short at 3 elements, erasing the last element which will get cleaned up by garbage collection
3. D is set to the element of what is now the final elemnent (2nd index), so Mr. PeanutButter. The list is now "Bojack" -> "Mr. PeanutButter" -> "Mr. PeanutButter"


** Problem 12
Consider the following pseudocode for a sorting algorithm (please remember that when writing pseu-
docode both bounds of a loop are included):
#+BEGIN_SRC java
sorted = false
start = 0
end = list.length
while (!sorted){
        sorted = true
        for j from start to end-2{
                if (list[j] > list[j+1]){
                        swap(list[j],list[j+1])
                        sorted = false
                }
        }
        // line_1
        if (sorted)
                break

        end--

        for j from end-2 to start {
                if (list[j] > list[j+1]){
                        swap(list[j],list[j+1])
                        sorted = false
                }
        }
        start++
}
// line_2
#+END_SRC

*** Answer
a. [0, 4, 5, 8, 3, 2, 1]
b. [0, 1, 2, 3, 4, 5, 8, 9]

** Problem 13
Consider the following pseudocode for selection sort:
#+BEGIN_SRC java
for delim from 0 to N-2 {
        min = delim
        for i from delim+1 to N-1 {
                if(list[i] < list[min]) {
                        min = i
                }
        }
        if(min != delim) {
                swap(list[min], list[delim])
        }
}
#+END_SRC
(a) Assuming you would like to sort the list [1, 5, 3, 9, 2, 6, 4]. What is the state of the list after 4
passes (i.e. iterations of the outer loop) ?
(b) How many total swaps will the algorithm perform to sort the list mentioned above?


*** Answer
a. [1, 2, 3, 4, 5, 6, 9]
b. 4 swaps, but the algorithm has an time efficiency of o(n^2), meaning it will loop through the array twice per index





